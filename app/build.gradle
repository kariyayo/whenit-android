plugins {
    alias libs.plugins.agp
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.hilt.android
    alias libs.plugins.android.junit5
    alias libs.plugins.license.tools
}

android {
    namespace "info.bati11.whenit"
    compileSdk libs.versions.app.compileSdk.get().toInteger()
    defaultConfig {
        applicationId "info.bati11.whenit"
        minSdkVersion libs.versions.app.minSdk.get().toInteger()
        targetSdk libs.versions.app.targetSdk.get().toInteger()
        versionCode libs.versions.app.versionCode.get().toInteger()
        versionName libs.versions.app.versionName.get()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        resConfigs "en", "ja"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
            correctErrorTypes true
        }
    }
    dataBinding {
        enabled = true
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    packagingOptions {
        exclude("META-INF/LICENSE*")
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            manifestPlaceholders = [appName: "@string/app_name_dev"]
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "@string/app_name"]
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()
    }
    lintOptions {
        disable "InvalidPeriodicWorkRequestInterval"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.kotlin.std.lib.jdk7
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.serialization.json
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.legacy.support.v4
    implementation libs.compose.navigation
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.common.java8

    implementation libs.androidx.preference
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler

    implementation libs.androidx.recyclerview
    implementation libs.androidx.paging.runtime
    implementation libs.paging.compose
    implementation libs.room.paging
    testImplementation libs.androidx.paging.runtime

    implementation libs.androidx.work.runtime.ktx

    implementation libs.hilt.android
    implementation libs.hilt.work
    implementation libs.hilt.compose.navigation
    kapt libs.hilt.compiler
    androidTestImplementation libs.hilt.android.testing
    kaptAndroidTest libs.hilt.compiler
    testImplementation libs.hilt.android.testing
    kaptTest libs.hilt.compiler

    implementation libs.material
    implementation libs.threetenapp
    implementation libs.timber

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.compose.runtime
    implementation libs.androidx.compose.material
    implementation libs.androidx.compose.material.icons
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.lifecycle.runntime.compose
    debugImplementation libs.androidx.compose.ui.tooling

    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.junit.jupiter.params
    testRuntimeOnly libs.junit.vintage.engine
    testImplementation libs.junit4
    testImplementation libs.mockk
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso
    androidTestImplementation platform(libs.androidx.compose.bom)

    debugImplementation libs.flipper
    debugImplementation libs.soloader
    releaseImplementation libs.flipper.noop
}
